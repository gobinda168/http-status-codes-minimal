"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStatusCode = exports.getReasonPhrase = exports.ReasonPhrases = exports.StatusCodes = void 0;
// Enum for Status Codes
var StatusCodes;
(function (StatusCodes) {
    StatusCodes[StatusCodes["CONTINUE"] = 100] = "CONTINUE";
    StatusCodes[StatusCodes["SWITCHING_PROTOCOLS"] = 101] = "SWITCHING_PROTOCOLS";
    StatusCodes[StatusCodes["PROCESSING"] = 102] = "PROCESSING";
    StatusCodes[StatusCodes["EARLY_HINTS"] = 103] = "EARLY_HINTS";
    StatusCodes[StatusCodes["OK"] = 200] = "OK";
    StatusCodes[StatusCodes["CREATED"] = 201] = "CREATED";
    StatusCodes[StatusCodes["ACCEPTED"] = 202] = "ACCEPTED";
    StatusCodes[StatusCodes["NON_AUTHORITATIVE_INFORMATION"] = 203] = "NON_AUTHORITATIVE_INFORMATION";
    StatusCodes[StatusCodes["NO_CONTENT"] = 204] = "NO_CONTENT";
    StatusCodes[StatusCodes["RESET_CONTENT"] = 205] = "RESET_CONTENT";
    StatusCodes[StatusCodes["PARTIAL_CONTENT"] = 206] = "PARTIAL_CONTENT";
    StatusCodes[StatusCodes["MULTI_STATUS"] = 207] = "MULTI_STATUS";
    StatusCodes[StatusCodes["MULTIPLE_CHOICES"] = 300] = "MULTIPLE_CHOICES";
    StatusCodes[StatusCodes["MOVED_PERMANENTLY"] = 301] = "MOVED_PERMANENTLY";
    StatusCodes[StatusCodes["FOUND"] = 302] = "FOUND";
    StatusCodes[StatusCodes["SEE_OTHER"] = 303] = "SEE_OTHER";
    StatusCodes[StatusCodes["NOT_MODIFIED"] = 304] = "NOT_MODIFIED";
    StatusCodes[StatusCodes["USE_PROXY"] = 305] = "USE_PROXY";
    StatusCodes[StatusCodes["TEMPORARY_REDIRECT"] = 307] = "TEMPORARY_REDIRECT";
    StatusCodes[StatusCodes["PERMANENT_REDIRECT"] = 308] = "PERMANENT_REDIRECT";
    StatusCodes[StatusCodes["BAD_REQUEST"] = 400] = "BAD_REQUEST";
    StatusCodes[StatusCodes["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
    StatusCodes[StatusCodes["PAYMENT_REQUIRED"] = 402] = "PAYMENT_REQUIRED";
    StatusCodes[StatusCodes["FORBIDDEN"] = 403] = "FORBIDDEN";
    StatusCodes[StatusCodes["NOT_FOUND"] = 404] = "NOT_FOUND";
    StatusCodes[StatusCodes["METHOD_NOT_ALLOWED"] = 405] = "METHOD_NOT_ALLOWED";
    StatusCodes[StatusCodes["NOT_ACCEPTABLE"] = 406] = "NOT_ACCEPTABLE";
    StatusCodes[StatusCodes["PROXY_AUTHENTICATION_REQUIRED"] = 407] = "PROXY_AUTHENTICATION_REQUIRED";
    StatusCodes[StatusCodes["REQUEST_TIMEOUT"] = 408] = "REQUEST_TIMEOUT";
    StatusCodes[StatusCodes["CONFLICT"] = 409] = "CONFLICT";
    StatusCodes[StatusCodes["GONE"] = 410] = "GONE";
    StatusCodes[StatusCodes["LENGTH_REQUIRED"] = 411] = "LENGTH_REQUIRED";
    StatusCodes[StatusCodes["PRECONDITION_FAILED"] = 412] = "PRECONDITION_FAILED";
    StatusCodes[StatusCodes["PAYLOAD_TOO_LARGE"] = 413] = "PAYLOAD_TOO_LARGE";
    StatusCodes[StatusCodes["URI_TOO_LONG"] = 414] = "URI_TOO_LONG";
    StatusCodes[StatusCodes["UNSUPPORTED_MEDIA_TYPE"] = 415] = "UNSUPPORTED_MEDIA_TYPE";
    StatusCodes[StatusCodes["RANGE_NOT_SATISFIABLE"] = 416] = "RANGE_NOT_SATISFIABLE";
    StatusCodes[StatusCodes["EXPECTATION_FAILED"] = 417] = "EXPECTATION_FAILED";
    StatusCodes[StatusCodes["IM_A_TEAPOT"] = 418] = "IM_A_TEAPOT";
    StatusCodes[StatusCodes["INSUFFICIENT_SPACE_ON_RESOURCE"] = 419] = "INSUFFICIENT_SPACE_ON_RESOURCE";
    StatusCodes[StatusCodes["METHOD_FAILURE"] = 420] = "METHOD_FAILURE";
    StatusCodes[StatusCodes["MISDIRECTED_REQUEST"] = 421] = "MISDIRECTED_REQUEST";
    StatusCodes[StatusCodes["UNPROCESSABLE_ENTITY"] = 422] = "UNPROCESSABLE_ENTITY";
    StatusCodes[StatusCodes["LOCKED"] = 423] = "LOCKED";
    StatusCodes[StatusCodes["FAILED_DEPENDENCY"] = 424] = "FAILED_DEPENDENCY";
    StatusCodes[StatusCodes["UPGRADE_REQUIRED"] = 426] = "UPGRADE_REQUIRED";
    StatusCodes[StatusCodes["PRECONDITION_REQUIRED"] = 428] = "PRECONDITION_REQUIRED";
    StatusCodes[StatusCodes["TOO_MANY_REQUESTS"] = 429] = "TOO_MANY_REQUESTS";
    StatusCodes[StatusCodes["REQUEST_HEADER_FIELDS_TOO_LARGE"] = 431] = "REQUEST_HEADER_FIELDS_TOO_LARGE";
    StatusCodes[StatusCodes["UNAVAILABLE_FOR_LEGAL_REASONS"] = 451] = "UNAVAILABLE_FOR_LEGAL_REASONS";
    StatusCodes[StatusCodes["INTERNAL_SERVER_ERROR"] = 500] = "INTERNAL_SERVER_ERROR";
    StatusCodes[StatusCodes["NOT_IMPLEMENTED"] = 501] = "NOT_IMPLEMENTED";
    StatusCodes[StatusCodes["BAD_GATEWAY"] = 502] = "BAD_GATEWAY";
    StatusCodes[StatusCodes["SERVICE_UNAVAILABLE"] = 503] = "SERVICE_UNAVAILABLE";
    StatusCodes[StatusCodes["GATEWAY_TIMEOUT"] = 504] = "GATEWAY_TIMEOUT";
    StatusCodes[StatusCodes["HTTP_VERSION_NOT_SUPPORTED"] = 505] = "HTTP_VERSION_NOT_SUPPORTED";
    StatusCodes[StatusCodes["INSUFFICIENT_STORAGE"] = 507] = "INSUFFICIENT_STORAGE";
    StatusCodes[StatusCodes["NETWORK_AUTHENTICATION_REQUIRED"] = 511] = "NETWORK_AUTHENTICATION_REQUIRED";
})(StatusCodes || (exports.StatusCodes = StatusCodes = {}));
// Enum for Reason Phrases
var ReasonPhrases;
(function (ReasonPhrases) {
    ReasonPhrases["CONTINUE"] = "Continue";
    ReasonPhrases["SWITCHING_PROTOCOLS"] = "Switching Protocols";
    ReasonPhrases["PROCESSING"] = "Processing";
    ReasonPhrases["EARLY_HINTS"] = "Early Hints";
    ReasonPhrases["OK"] = "OK";
    ReasonPhrases["CREATED"] = "Created";
    ReasonPhrases["ACCEPTED"] = "Accepted";
    ReasonPhrases["NON_AUTHORITATIVE_INFORMATION"] = "Non-Authoritative Information";
    ReasonPhrases["NO_CONTENT"] = "No Content";
    ReasonPhrases["RESET_CONTENT"] = "Reset Content";
    ReasonPhrases["PARTIAL_CONTENT"] = "Partial Content";
    ReasonPhrases["MULTI_STATUS"] = "Multi-Status";
    ReasonPhrases["MULTIPLE_CHOICES"] = "Multiple Choices";
    ReasonPhrases["MOVED_PERMANENTLY"] = "Moved Permanently";
    ReasonPhrases["FOUND"] = "Found";
    ReasonPhrases["SEE_OTHER"] = "See Other";
    ReasonPhrases["NOT_MODIFIED"] = "Not Modified";
    ReasonPhrases["USE_PROXY"] = "Use Proxy";
    ReasonPhrases["TEMPORARY_REDIRECT"] = "Temporary Redirect";
    ReasonPhrases["PERMANENT_REDIRECT"] = "Permanent Redirect";
    ReasonPhrases["BAD_REQUEST"] = "Bad Request";
    ReasonPhrases["UNAUTHORIZED"] = "Unauthorized";
    ReasonPhrases["PAYMENT_REQUIRED"] = "Payment Required";
    ReasonPhrases["FORBIDDEN"] = "Forbidden";
    ReasonPhrases["NOT_FOUND"] = "Not Found";
    ReasonPhrases["METHOD_NOT_ALLOWED"] = "Method Not Allowed";
    ReasonPhrases["NOT_ACCEPTABLE"] = "Not Acceptable";
    ReasonPhrases["PROXY_AUTHENTICATION_REQUIRED"] = "Proxy Authentication Required";
    ReasonPhrases["REQUEST_TIMEOUT"] = "Request Timeout";
    ReasonPhrases["CONFLICT"] = "Conflict";
    ReasonPhrases["GONE"] = "Gone";
    ReasonPhrases["LENGTH_REQUIRED"] = "Length Required";
    ReasonPhrases["PRECONDITION_FAILED"] = "Precondition Failed";
    ReasonPhrases["PAYLOAD_TOO_LARGE"] = "Payload Too Large";
    ReasonPhrases["URI_TOO_LONG"] = "URI Too Long";
    ReasonPhrases["UNSUPPORTED_MEDIA_TYPE"] = "Unsupported Media Type";
    ReasonPhrases["RANGE_NOT_SATISFIABLE"] = "Range Not Satisfiable";
    ReasonPhrases["EXPECTATION_FAILED"] = "Expectation Failed";
    ReasonPhrases["IM_A_TEAPOT"] = "I'm a Teapot";
    ReasonPhrases["INSUFFICIENT_SPACE_ON_RESOURCE"] = "Insufficient Space on Resource";
    ReasonPhrases["METHOD_FAILURE"] = "Method Failure";
    ReasonPhrases["MISDIRECTED_REQUEST"] = "Misdirected Request";
    ReasonPhrases["UNPROCESSABLE_ENTITY"] = "Unprocessable Entity";
    ReasonPhrases["LOCKED"] = "Locked";
    ReasonPhrases["FAILED_DEPENDENCY"] = "Failed Dependency";
    ReasonPhrases["UPGRADE_REQUIRED"] = "Upgrade Required";
    ReasonPhrases["PRECONDITION_REQUIRED"] = "Precondition Required";
    ReasonPhrases["TOO_MANY_REQUESTS"] = "Too Many Requests";
    ReasonPhrases["REQUEST_HEADER_FIELDS_TOO_LARGE"] = "Request Header Fields Too Large";
    ReasonPhrases["UNAVAILABLE_FOR_LEGAL_REASONS"] = "Unavailable For Legal Reasons";
    ReasonPhrases["INTERNAL_SERVER_ERROR"] = "Internal Server Error";
    ReasonPhrases["NOT_IMPLEMENTED"] = "Not Implemented";
    ReasonPhrases["BAD_GATEWAY"] = "Bad Gateway";
    ReasonPhrases["SERVICE_UNAVAILABLE"] = "Service Unavailable";
    ReasonPhrases["GATEWAY_TIMEOUT"] = "Gateway Timeout";
    ReasonPhrases["HTTP_VERSION_NOT_SUPPORTED"] = "HTTP Version Not Supported";
    ReasonPhrases["INSUFFICIENT_STORAGE"] = "Insufficient Storage";
    ReasonPhrases["NETWORK_AUTHENTICATION_REQUIRED"] = "Network Authentication Required";
})(ReasonPhrases || (exports.ReasonPhrases = ReasonPhrases = {}));
// Function to get reason phrase by status code
function getReasonPhrase(statusCode) {
    return ReasonPhrases[StatusCodes[statusCode]];
}
exports.getReasonPhrase = getReasonPhrase;
// Function to get status code by reason phrase
function getStatusCode(reasonPhrase) {
    const entry = Object.entries(ReasonPhrases).find(([_, value]) => value.toLocaleLowerCase() === reasonPhrase.toLocaleLowerCase());
    if (entry) {
        return StatusCodes[entry[0]];
    }
    return undefined;
}
exports.getStatusCode = getStatusCode;
